{"version":3,"sources":["components/UserList.js","components/RepoList.js","components/UserDetail.js","components/RepoDetail.js","components/RecentSearch.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["useStyles","root","marginTop","flexGrow","paper","margin","maxWidth","image","width","height","img","display","maxHeight","UserList","user","this","props","react_default","a","createElement","style","Paper","Grid","container","spacing","item","ButtonBase","alt","src","avatar_url","xs","sm","direction","Typography","gutterBottom","variant","login","html_url","Button","color","react_router_dom","to","concat","React","Component","Repolist","_this$props","repo","name","description","language","cursor","created_at","UserDetail","state","repos","getUserRepos","_callee","match","response","data","regenerator_default","wrap","_context","prev","next","fetch","params","id","sent","json","_this","setState","console","log","stop","getUser","_callee2","_context2","_this$state","Fragment","className","bio","company","followers","following","location","public_repos","marginBottom","email","updated_at","align","map","RepoList","RepoDetail","getRepo","url","owner","RecentSearch","pastsearches","removeSerachItem","index","lastSearches","updatedpastSearchs","splice","localStorage","setItem","JSON","stringify","parse","getItem","Object","toConsumableArray","_this2","lastSearch","key","List","onClick","component","aria-label","ListItem","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","Delete_default","Home","_useState","useState","_useState2","slicedToArray","users","setUsers","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","_useState7","_useState8","setlastSearches","useEffect","searchUser","_ref","asyncToGenerator","mark","items","apply","arguments","updateLastSearches","oldSearchs","push","storeSearch","onSubmit","e","preventDefault","type","value","onChange","target","length","components_RecentSearch","components_UserList","connect","react_router","path","exact","Boolean","window","hostname","initialState","reducer","undefined","objectSpread","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72a01439.chunk.js","sourcesContent":["import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport { Button } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = {\n    root: {\n      marginTop: '20px',\n      flexGrow: 1,\n    },\n    paper: {\n      margin: 'auto',\n      maxWidth: 1000,\n    },\n    image: {\n      width: 128,\n      height: 128,\n    },\n    img: {\n      margin: 'auto',\n      display: 'block',\n      maxWidth: '100%',\n      maxHeight: '100%',\n    },\n  };\n  \n  class UserList extends React.Component {\n\n    render() {\n\n        let { user } = this.props;\n    \n        return (\n            <div style={useStyles.root}>\n              <Paper style={useStyles.paper}>\n                <Grid container spacing={2}>\n                  <Grid item>\n                    <ButtonBase style={useStyles.image} >\n                      <img style={useStyles.img} alt=\"complex\" src={user.avatar_url} />\n                    </ButtonBase>\n                  </Grid>\n                  <Grid item xs={12} sm container>\n                    <Grid item xs container direction=\"column\" spacing={2}>\n                      <Grid item xs>\n                        <Typography gutterBottom variant=\"subtitle1\">\n                          Github User Name : { user.login }\n                        </Typography>\n                        <Typography variant=\"body2\" gutterBottom>\n                          Github User link : {user.html_url}\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                    <Button color=\"primary\">\n                      <Link to={`/user/${user.login}`}> See Detail</Link>\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </div>\n          );\n        }\n\n    };\n \n  export default UserList;","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = {\n    root: {\n      marginTop: '20px',\n      flexGrow: 1,\n    },\n    paper: {\n      margin: 'auto',\n      maxWidth: 1000,\n    },\n    image: {\n      width: 128,\n      height: 128,\n    },\n    img: {\n      margin: 'auto',\n      display: 'block',\n      maxWidth: '100%',\n      maxHeight: '100%',\n    },\n  };\n  \n  class Repolist extends React.Component {\n\n\n    render() {\n        let { repo, user } = this.props;\n\n        return (\n            <div style={useStyles.root}>\n              <Paper style={useStyles.paper}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm container>\n                    <Grid item xs container direction=\"column\" spacing={2}>\n                      <Grid item xs>\n                        <Typography gutterBottom color=\"primary\">\n                          Repo Name : { repo.name }\n                        </Typography>\n                        <Typography variant=\"body2\" >\n                          Description: {repo.description? repo.description : \"No Description present\"}\n                        </Typography>\n                        <Typography variant=\"body2\" >\n                          Language: {repo.language}\n                        </Typography>\n                        <Typography variant=\"body2\"  gutterBottom>\n                          Github Repo link : <href>{repo.html_url}</href>\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                    <Grid item>\n                        <Typography variant=\"body1\" style={{ cursor: 'pointer' }}>\n                         Created on {repo.created_at}\n                        </Typography>\n                        <Typography variant=\"body2\" style={{ cursor: 'pointer' }}>\n                          <Link to={`/repos/${user.login}/${repo.name}`}> See Detail</Link>\n                        </Typography>\n                      </Grid> \n                  </Grid>\n                </Grid>\n              </Paper>\n            </div>\n          );\n        }\n    };\n  \n  export default Repolist;","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport RepoList from './RepoList';\n\n  class UserDetail extends React.Component {\n    state = {\n        user: {},\n        repos: []\n    };\n\n    getUserRepos = async (match) =>{\n        const response = await fetch(`https://api.github.com/users/${match.params.id}/repos`);\n        const data = await response.json();\n        this.setState({repos: data})\n        console.log(data);\n\n    }\n\n    getUser = async (match) => {\n        const response = await fetch(`https://api.github.com/users/${match.params.id}`);\n        const data = await response.json();\n        this.setState({user: data})\n         console.log(data);\n      }\n\n    componentDidMount () {\n        let { match } = this.props;\n        this.getUser(match);\n        this.getUserRepos(match);\n    }\n\n    render() {\n        let { user, repos } = this.state;\n\n        return (\n            <React.Fragment>\n            <div className=\"user-detail\" >\n              <Paper style={{height: '100%'}}>\n                <Grid container spacing={2}>\n                  <Grid item>\n                    <ButtonBase >\n                      <img alt=\"complex\" src={user.avatar_url} />\n                    </ButtonBase>\n                  </Grid>\n                  <Grid item xs={12} sm container>\n                    <Grid item xs container direction=\"column\" spacing={2}>\n                      <Grid item xs>\n                        <Typography gutterBottom color=\"primary\" variant=\"subtitle1\">\n                          Github Name : { user.name }\n                        </Typography>\n                        <Typography gutterBottom color=\"primary\" variant=\"subtitle1\">\n                          Bio: { user.bio ? user.bio : \"Not added\" }\n                        </Typography>\n                        <Typography gutterBottom color=\"primary\" variant=\"subtitle1\">\n                          Company: { user.company ? user.company : \"Not added\" }\n                        </Typography>\n                        <Typography gutterBottom color=\"primary\" variant=\"subtitle1\">\n                          Github Username : { user.login }\n                        </Typography>\n                        <Typography gutterBottom variant=\"body2\" >\n                          Github link : {user.html_url}\n                        </Typography>\n                        <Typography gutterBottom variant=\"body2\" >\n                          Followers : {user.followers}\n                        </Typography>\n                        <Typography gutterBottom variant=\"body2\" >\n                          Following : {user.following}\n                        </Typography>\n                        <Typography gutterBottom variant=\"body2\" >\n                          Location : {user.location}\n                        </Typography>\n                        <Typography gutterBottom variant=\"body2\" >\n                          Public Repositorites : {user.public_repos ? user.public_repos : \"Not added\"}\n                        </Typography>\n                        <Typography style={{ marginBottom: -25 }} gutterBottom variant=\"body2\" >\n                          Email : {user.email ? user.email : \"Not added\"}\n                        </Typography>\n                      </Grid>\n                      <Grid item>\n                        <Typography gutterBottom color=\"secondary\" variant=\"body2\" >\n                         Created on {user.created_at}\n                        </Typography>\n                        <Typography gutterBottom color=\"secondary\" variant=\"body2\" >\n                         Last updated on {user.updated_at}\n                        </Typography>\n                      </Grid> \n                    </Grid>\n                   </Grid>\n                </Grid>\n              </Paper>\n            </div>\n            <div >\n                <div className=\"repo-list\">\n                <Typography variant=\"body4\" color=\"primary\" align=\"center \">\n                {user.name}'s Repositorites\n                </Typography>\n                </div>\n                {repos &&\n                    repos.map(repo =>(\n                    <RepoList repo={repo} user={user}/>\n                    ) )\n                }\n            </div>\n            </React.Fragment>\n          );\n        }\n    };\n\n  export default UserDetail;","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\n  class RepoDetail extends React.Component {\n\n    state = {\n        repo: {},\n        user: {}\n        };\n\n    getRepo = async (match) => {\n        const response = await fetch(`https://api.github.com${match.url}`);\n        const data = await response.json();\n        this.setState({repo: data, user: data.owner})\n        console.log(data);\n        console.log(data.owner);\n      }\n\n    componentDidMount () {\n        let { match } = this.props;\n        this.getRepo(match);\n    }\n\n    render() {\n        let { repo, user } = this.state;\n\n        return (\n            <React.Fragment>\n            <div className=\"user-detail\" >\n                    <Typography gutterBottom color=\"primary\" variant=\"subtitle1\">\n                          Github Name : { repo.name }\n                        </Typography>\n                        <Typography gutterBottom variant=\"subtitle1\">\n                          Description : {repo.description? repo.description : \"No Description present\"}\n                        </Typography>\n                        <Typography gutterBottom variant=\"subtitle1\">\n                          Language : { repo.language }\n                        </Typography>\n                        <Typography gutterBottom variant=\"subtitle1\" >\n                         Created on : {repo.created_at}\n                        </Typography>\n                        <Typography gutterBottom variant=\"subtitle1\" color=\"secondary\">\n                          Created By : {user.login}\n                        </Typography>\n                        <Typography variant=\"subtitle1\" gutterBottom>\n                          Github Repo link : {repo.html_url}\n                        </Typography>\n            </div>\n            </React.Fragment>\n          );\n        }\n    };\n  \n  export default RepoDetail;","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport IconButton from '@material-ui/core/IconButton';\nimport Delete from '@material-ui/icons/Delete';\n\n  class RecentSearch extends React.Component {\n\n    state = {\n      pastsearches: []\n    }\n\n\n    componentDidMount () {\n      let { lastSearches } = this.props;\n      this.setState({pastsearches:[...lastSearches]});\n    }\n\n    removeSerachItem = async (index) => {\n      let { lastSearches } = this.props;\n\n      lastSearches.splice(index, 1)\n\n      await localStorage.setItem('pastsearches', JSON.stringify(lastSearches));\n\n      var updatedpastSearchs = JSON.parse(localStorage.getItem('pastsearches'));\n      this.setState({pastsearches: [...updatedpastSearchs]});\n    }\n\n    render() {\n        let { lastSearches } = this.props;\n        \n        return (\n          lastSearches && (<div className='recent-search'>\n            <span >Last Searches </span> \n              <Paper >\n                {\n                  lastSearches && lastSearches.map((lastSearch,index)=>(\n                    <div key={index}>\n                      <List onClick={()=>this.removeSerachItem(index)} component=\"nav\" aria-label=\"Main mailbox folders\">\n                        <ListItem >\n                        <ListItemText primary={lastSearch} />\n                          <ListItemSecondaryAction>\n                            <IconButton name=\"delete\" edge=\"end\" aria-label=\"Comments\">\n                              <Delete />\n                            </IconButton>\n                          </ListItemSecondaryAction>\n                        </ListItem>\n                      </List>\n                     </div>\n                  ))\n                }\n              </Paper>\n            </div>)\n          );\n        }\n    };\n\n  export default RecentSearch;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport UserList from './components/UserList';\nimport UserDetail from './components/UserDetail';\nimport RepoDetail from './components/RepoDetail';\nimport RecentSearch from './components/RecentSearch';\nimport {  HashRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport { connect } from 'react-redux'; \n\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/user/:id\" exact component={UserDetail} />\n        <Route path=\"/repos/:id/:id\" exact component={RepoDetail} />\n        </Switch>\n      </Router>\n  );\n}\n\nconst Home = () => {\n\n  const [ users, setUsers] = useState([]);\n  const [ search, setSearch] = useState(\"\");\n  const [ query, setQuery] = useState(\"\");\n  const [ lastSearches, setlastSearches] = useState([]);\n\n  useEffect (()=> {\n    searchUser();\n  },[query]);\n\n  const searchUser = async () => {\n    const response = await fetch(`https://api.github.com/search/users?q=${query}`);\n    const data = await response.json();\n    setUsers(data.items);\n  }\n\n  const updateSearch =  e => {\n    setSearch(e.target.value);\n  }\n\n  const getUserSearch =  e => {\n    e.preventDefault();\n    setQuery(search);\n    updateLastSearches(search);\n  }\n\n  const resetSearch = e => {\n    setQuery(\"\");\n    setSearch(\"\");\n  }\n\n  const updateLastSearches =  (search) => {\n    let oldSearchs = [...lastSearches];\n    oldSearchs.push(search);\n    setlastSearches(oldSearchs);\n    localStorage.setItem('pastsearches', JSON.stringify(oldSearchs));\n  }\n\n  var storeSearch = JSON.parse(localStorage.getItem('pastsearches'));\n\n  return (\n    <div className=\"App\">\n      <p> Look for Github Users</p>\n      <form onSubmit={getUserSearch} className='search-form' >\n        <input className='search-bar' type=\"text\" value={search} onChange={updateSearch}/>\n        <button className='search-button' type=\"submit\"> Search </button>\n        <button className='clear-search-button' type=\"button\" onClick={resetSearch}> Clear Result</button>\n      </form>\n\n    {storeSearch &&  storeSearch.length > 0 && <div>\n      <RecentSearch lastSearches={storeSearch}/>\n      </div>}\n      <div className='user-list'>\n      {users &&\n        users.map((user, index) =>(\n          <UserList key={index} user={user}/>\n        ) )\n      }\n      </div>\n    </div>\n  );\n}\n\nexport default connect()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nconst initialState = {\n    search: []\n};\n\nconst reducer = ( state = initialState, action) => {\n    const newState = {...state};\n\n    return newState;\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './store/reducer';\n\nconst store = createStore(reducer);\n\nReactDOM.render(<Provider store={store} ><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}